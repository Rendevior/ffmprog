#!/bin/sh

# ffmprog
# Easy and Simple progressbar for ffmpeg

trap 'rm ~/.vstats ; pkill -9 ffmpeg ; printf "\n" ; exit 1' INT HUP

get_infos(){
	inf_meta="$(ffmpeg -i "${1}" 2>&1)"
	vid_dur="$(printf '%s' "${inf_meta}" | sed -n "s/.* Duration: \([^,]*\), start: .*/\1/p")"
	vid_fps="$(printf '%s' "${inf_meta}" | sed -nE '/fps/ {s_.*, (.*) fps.*_\1_p;q}')"
	if [ -z "${vid_dur}" ] || [ -z "${vid_fps}" ]; then
		printf '%s\n' "An Error Occured" >&2
		exit 1
	fi
	# Time
	hrs="${vid_dur%%:*}"
	mins="$(printf '%s' "${vid_dur}" | cut -d':' -f2)"
	secs="${vid_dur##*:}" secs="${secs%%.*}" secs="${secs##0}"
	vid_time="$((hrs * 3600 + mins * 60 + secs))"
	total_frames="$(printf '%s\n' "${vid_time} * ${vid_fps}" | bc)" total_frames="${total_frames%%.*}"
}

run_background(){
	ffmpeg -progress ~/.vstats -y "${@}" 2>/dev/null &
	ffmpeg_pid="${!}"
}

progress(){
	while [ -e "/proc/${ffmpeg_pid}" ]; do
		if [ -e ~/.vstats ]; then
			cur_frame="$(grep "frame=" ~/.vstats | tail -n 1)" cur_frame="${cur_frame##*=}"
			cur_bar="$((cur_frame * 100 / total_frames ))"
			progbar "${cur_bar}" 100 "Status: ${cur_frame:-0}/${total_frames}"
			sleep 0.3	# Interval to avoid using too much memory (adjust if if you want)
		fi
	done
	rm ~/.vstats
}

progbar(){
	prog="$(( ${1} * 100 / ${2} * 100 / 100 ))"
	done="$(( (prog * 4) / 10 ))"
	left="$(( 40 - done ))"
	fill="$(printf "\033[7m\033[38;5;$((done + 20))m%${done}s\033[0m")"
	empty="$(printf "%${left}s")"
	printf '\r%s %s   %s' "[${fill}${empty}]" "${prog}%" "${3}"
}

dep_check(){
	for deppack; do
		if ! command -v "${deppack}" >/dev/null ; then
			printf '%s\n' "Program \"${deppack}\" is not installed." >&2
			exit 1
		fi
	done
}

# Variable
file_url="$(printf '%s' "${*}" | sed -E 's_.*-i ([^ ]*).*_\1_g')"

# Call Functions
dep_check "bc" "ffmpeg" "sed" "grep"
get_infos "${file_url}"
run_background "${@}"
progress
